openapi: 3.0.0
servers:
  - description: arbitrary server
    variables:
      host:
        default: 192.168.0.199
        description: the IP address or mDNS hostname under which Archimedes is running
      prefix:
        description: path prefix under which you'll find the api
        default: /api
    url: http://{host}{prefix}
  # Added by API Auto Mocking Plugin
  - description: test API automatically mocked by SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MovingPieces/Archimedes/0.1.0
info:
  description: |
    Archimedes is the firmware for the Ampersand table. Here is its HTTP API
    
    The API is more like scoped JSON RPC than REST, for convenience and consistency.
  version: 0.1.0
  title: Archimedes HTTP API
  contact:
    email: jacek@movingpieces.studio
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  - name: orders
    description: Telling the table to do stuff
  - name: tracks
    description: Operations relating to tracks
  - name: playlists
    description: Operations relating to playlists
  - name: info
    description: getting and setting generic info
    
paths:
  /order/give:
    post:
      tags: 
        - orders
      summary: clears the order queue (if exists) and executes a given order immediatley
      description: |
        NOTE: moveToPoint order type is not implemented yet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              play playlist:
                value:
                  orderType: playPlaylist
                  playlistName: clean_fast

              stop:
                value:
                  orderType: stop
              move to point - XY:
                value:
                  orderType: moveToPoint
                  interpolation: linear
                  simplify: true
                  target:
                    coordinateSystem: XY
                    x: 0.3
                    y: 0.6
              move to point - Theta Rho:
                value:
                  orderType: moveToPoint
                  interpolation: spiral
                  simplify: false
                  target:
                    coordinateSystem: ThetaRho
                    theta: 0.323344
                    rho: 0.99888
              run the clock app:
                value:
                  orderType: runApp
                  appName: clock
                  args:
                    foo: bar
      responses:
        '200':
          description: order accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendSuccess'
        '4XX':
          description: a client error occured 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendError'
        '500':
          description: a server error ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendFail'
  /info/getPosition:
    post:
      tags: 
        - info
      summary: | 
        gets the current position of the ball in the format requested
        by the client
      description: |
        The returned Point will be in the requested coordinate system and
        simplified if requested.
        
        NOTE: This endpoint is POST instead of GET for a couple of reasons:
        - client code consistency - consistent way of passing parameters
        - making sure the browser/client doesn't cache the response
        - we're not doing REST
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - coordinateSystem
              properties:
                coordinateSystem:
                  type: string
                  enum: [ThetaRho, XY]
                simplify:
                  type: boolean
                  default: false
      responses:
        '200':
          description: information returned
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - data
                properties:
                  status:
                    type: string
                    enum: [success]
                    description: should always be set to "success"
                  data:
                    $ref: '#/components/schemas/Point'
                  
        '4XX':
          description: a client error occured 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendError'
        '500':
          description: a server error ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendFail'
  /info/getCurrentStatus:
    post:
      tags: 
        - info
      summary: | 
        gets the current status of the table
      description: |
        The returned currentPosition Point will be in the requested coordinate system and
        simplified if requested.
        
        If no coordinatesystem is provided, no currentPosition is returned
        
        NOTE: This endpoint is POST instead of GET for a couple of reasons:
        - client code consistency - consistent way of passing parameters
        - making sure the browser/client doesn't cache the response
        - we're not doing REST
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coordinateSystem:
                  type: string
                  enum: [ThetaRho, XY]
                simplify:
                  type: boolean
                  default: false
      responses:
        '200':
          description: information returned
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - data
                properties:
                  status:
                    type: string
                    enum: [success]
                    description: should always be set to "success"
                  data:
                    type: object
                    properties:
                      position:
                        $ref: '#/components/schemas/Point'
                      action:
                        $ref: '#/components/schemas/Action'
                  
        '4XX':
          description: a client error occured 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendError'
        '500':
          description: a server error ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendFail'
  /playlist/view/{playlistName}.txt:
    get:
      tags:
        - playlists
      description: retrieving the playlist in the raw, plaintext format
      parameters:
        - in: path
          name: playlistName
          required: true
          schema:
            type: string
          example: my_favourite_tracks
      responses:
        '200':
          description: the playlist does exist and is returned in the same format it's stored on the table's SD card
          content:
            text/plain:
              example: |
                foo.thr
                bar.thr
        '404':
          description: playlist with this name doesn't exist
        '500':
          description: internal server error
  /track/view/{trackName}:
    get:
      tags:
        - tracks
      description: retrieving the track in the raw, plaintext format
      parameters:
        - in: path
          description: track file name, including the extension
          name: trackName
          required: true
          schema:
            type: string
          example: dither.thr
      responses:
        '200':
          description: the track does exist and is returned in the same format it's stored on the table's SD card
          content:
            text/plain:
              example: |
                0 0
                30 1
                31 1
                0 0
                32 1
                33 1
                0 0
                34 1
                35 1
                0 0
                36 1
                37 1
                0 0
                38 1
                39 1
                0 0
                40 1
                41 1
        '404':
          description: track with this name doesn't exist
        '500':
          description: internal server error
  /playlists/list:
    get:
      tags: 
        - playlists
      summary: | 
        returns list of playlist files on the machine
      responses:
        '200':
          description: shows the playlists
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - data
                properties:
                  status:
                    type: string
                    enum: [success]
                    description: should always be set to "success"
                  data:
                    type: object
                    required:
                      - files
                    properties:
                      files:
                        type: array
                        items:
                          $ref: '#/components/schemas/FileInfo'
                        example:
                          - fileName: clean.txt
                            size: 1024
                            lastModified: 1613427784
                          - fileName: for guests.txt
                            size: 23000
                            lastModified: 1613400000
                          - fileName: nighttime.txt
                            size: 2000000
                            lastModified: 1613527784
                          - fileName: demo.txt
                            size: 23000
                            lastModified: 1613300000
                          - fileName: Hi Mom.txt
                            size: 1024
                            lastModified: 1613427784
                  
        '4XX':
          description: a client error occured 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendError'
        '500':
          description: a server error ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendFail'
  /tracks/list:
    get:
      tags: 
        - tracks
      summary: | 
        returns list of tracks files on the machine
      responses:
        '200':
          description: shows the tracks
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - data
                properties:
                  status:
                    type: string
                    enum: [success]
                    description: should always be set to "success"
                  data:
                    type: object
                    required:
                      - files
                    properties:
                      files:
                        type: array
                        items:
                          $ref: '#/components/schemas/FileInfo'
                        example: 
                          - fileName: pretty_spiral.thr
                            size: 1024
                            lastModified: 1613427784
                          - fileName: pretty_pattern.thr
                            size: 23000
                            lastModified: 1613400000
                          - fileName: chaos monkey.thr
                            size: 2000000
                            lastModified: 1613527784
                          - fileName: aardvark.thr
                            size: 23000
                            lastModified: 1613300000
                          - fileName: YinYang.thr
                            size: 1024
                            lastModified: 1613427784
                          - fileName: dither.thr
                            size: 23000
                            lastModified: 1613400000
                          - fileName: foobar.thr
                            size: 2000000
                            lastModified: 1613527784
                          - fileName: bazban.thr
                            size: 23000
                            lastModified: 1613300000
                          - fileName: zooming.thr
                            size: 1024
                            lastModified: 1613427784
                          - fileName: sierpinsky.thr
                            size: 23000
                            lastModified: 1613400000
                          - fileName: fractal1.thr
                            size: 2000000
                            lastModified: 1613527784
                          - fileName: fractal2.thr
                            size: 23000
                            lastModified: 1613300000
                          - fileName: example.thr
                            size: 1024
                            lastModified: 1613427784
                          - fileName: banana.thr
                            size: 23000
                            lastModified: 1613400000
                          - fileName: rotate_twice_and_spiral_out.thr
                            size: 2000000
                            lastModified: 1613527784
                          - fileName: hi thar.thr
                            size: 23000
                            lastModified: 1613300000
                  
        '4XX':
          description: a client error occured 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendError'
        '500':
          description: a server error ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendFail'
# reusable components
components:
  schemas:
    Interpolation:
      type: string
      enum: [spiral, linear]
    ## orders
    Action:
      oneOf:
        - $ref: '#/components/schemas/PlaylistAction'
        - $ref: '#/components/schemas/TrackAction'
        - $ref: '#/components/schemas/StoppedAction'
      discriminator:
        propertyName: actionType
    StoppedAction:
      type: object
      required:
        - actionType
      properties:
        actionType:
          type: string
          enum: [stopped]
    TrackAction:
      type: object
      required:
        - actionType
      properties:
        actionType:
          type: string
          enum: [track]
        trackName:
          type: string
          example: hexagoner.thr
    PlaylistAction:
      type: object
      required:
        - actionType
      properties:
        actionType:
          type: string
          enum: [playlist]
        playlistName:
          type: string
          example: main
        laylistPosition:
          type: number
          example: 0
        currentTrackAction:
          $ref: '#/components/schemas/TrackAction'
    Order:
      oneOf:
        - $ref: '#/components/schemas/StopOrder'
        - $ref: '#/components/schemas/PlayPlaylistOrder'
        - $ref: '#/components/schemas/MoveToPointOrder'
        - $ref: '#/components/schemas/RunAppOrder'
      discriminator:
        propertyName: orderType
    StopOrder:
      type: object
      required:
        - orderType
      properties:
        orderType:
          type: string
          enum: [stop]
          example: stop
      example:
        orderType: stop
    PlayPlaylistOrder:
      type: object
      required:
        - orderType
        - playlistName
      properties:
        orderType:
          type: string
          enum: [playPlaylist]
          example: playPlaylist
        playlistName:
          description: the name of the playlist, without the extension
          type: string
          example: my_favourites
    RunAppOrder:
      type: object
      required:
        - orderType
        - appName
        - args
      properties:
        orderType:
          type: string
          enum: [runApp]
          example: runApp
        appName:
          description: the name of the 
          type: string
          example: clock
          enum: [clock]
        args:
          type: object
    MoveToPointOrder:
      type: object
      required:
        - orderType
        - target
        - interpolation
      properties:
        orderType:
          type: string
          enum: [moveToPoint]
          example: moveToPoint
        target:
          $ref: '#/components/schemas/Point'
        interpolation:
          $ref: '#/components/schemas/Interpolation'
        simplify:
          type: boolean
          default: false
          description: |
            decides if the "rotations" should be taken into account when moving between
            the current position and the targetPoint.
            
            For example ThetaRho(0.1, 0.13) and ThetaRho(3.24, 0.14) are right next to each
            other if you just consider the position of the steel ball, but they are a whole
            360 degree rotation away from each other.
            
            if simplify=true, any amount of full rotations is descarded and the movement
            goes on a shortest path (spiral or linear, depending the interpolation)
            
            NOTE: XY points don't contain the "full rotation" information, so if the
            target point is given in the XY coordinate system, simplify=true is implied
            and can't be overridden
            
    ## Points
    Point:
      oneOf:
        - $ref: '#/components/schemas/ThetaRho'
        - $ref: '#/components/schemas/XY'
      discriminator:
        propertyName: coordinateSystem
    ThetaRho:
      type: object
      required:
        - coordinateSystem
        - theta
        - rho
      properties:
        # swaggerhub doesn't really understand the differentiators, so let's just add the example
        coordinateSystem:
          type: string
          example: "ThetaRho"
        theta:
          type: number
          format: double
          example: 6.28
        rho:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
    XY:
      type: object
      required:
        - coordinateSystem
        - x
        - y
      properties:
        coordinateSystem:
          type: string
          example: "XY"
        x:
          type: number
          format: double
          example: 0.3
          minimum: -1.0
          maximum: 1.0
        y:
          type: number
          format: double
          example: 0.3
          minimum: -1.0
          maximum: 1.0
    FileInfo:
      type: object
      required:
        - fileName
        - size
        - lastModified
      properties:
        fileName:
          type: string
          example: "bursty_bezier.thr"
          description: the file name without the path
        size:
          type: number
          example: 1023
          description: size of the file in bytes
        lastModified:
          type: number
          example: 1632744684
          description: timestamp of the last time the file was modified
#    EmptyJSendResult:
#      oneOf:
#        - $ref: '#/components/schemas/JSendSuccess'
#        - $ref: '#/components/schemas/JSendError'
#        - $ref: '#/components/schemas/JSendFail'
    JSendError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [error]
          description: should always be set to "error"
        message:
          type: string
          description: A meaningful, end-user-readable (or at the least log-worthy) message, explaining what went wrong.
        data:
          type: object
          description: A generic container for any other information about the error, i.e. the conditions that caused the error, stack traces, etc.
        code:
          type: integer
          description: A numeric code corresponding to the error, if applicable
    JSendFail:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: [fail]
          description: should always be set to "fail"
        data:
          # description: Again, provides the wrapper for the details of why the request failed. If the reasons for failure correspond to POST values, the response object's keys SHOULD correspond to those POST values.
          type: object
          additionalProperties: true
          example:
            title: a title is required
    JSendSuccess:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: [success]
          description: should always be set to "success"
        data:
          type: object