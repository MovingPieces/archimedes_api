openapi: 3.0.0
servers:
  - description: arbitrary server
    variables:
      host:
        default: 192.168.0.199
        description: the IP address or mDNS hostname under which Archimedes is running
      prefix:
        description: path prefix under which you'll find the api
        default: /api
    url: http://{host}{prefix}
  # Added by API Auto Mocking Plugin
  - description: test API automatically mocked by SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MovingPieces/Archimedes/0.1.0
info:
  description: Archimedes is the firmware for the Ampersand table. Here is its HTTP API
  version: 0.1.0
  title: Archimedes HTTP API
  contact:
    email: jacek@movingpieces.studio
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  - name: orders
    description: Telling the table to do stuff
  - name: tracks
    description: Operations relating to tracks
  - name: playlists
    description: Operations relating to playlists
    
paths:
  /order/give:
    post:
      tags: 
        - orders
      summary: clears the order queue (if exists) and executes a given order immediatley
      description: |
        todo
        
        todo some more
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              move to point:
                value:
                  orderType: MoveToPointOrder
                  targetPoint:
                    coordinateSystem: ThetaRho
                    theta: 0.323344
                    rho: 0.99888
                  interpolation: spiral
                  simplify: false
              stop:
                value:
                  orderType: stop
              
        description: Inventory item to add
      responses:
        '200':
          description: order accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendSuccess'
        '4XX':
          description: a client error occured 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendError'
        '500':
          description: a server error ocurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSendFail'
  /playlist/view/{playlistName}.txt:
    get:
      tags:
        - playlists
      description: retrieving the playlist in the raw, plaintext format
      parameters:
        - in: path
          name: playlistName
          required: true
          schema:
            type: string
          example: my_favourite_tracks
      responses:
        '200':
          description: the playlist does exist and is returned in the same format it's stored on the table's SD card
          content:
            text/plain:
              example: |
                foo.thr
                bar.thr
        '404':
          description: playlist with this name doesn't exist
        '500':
          description: internal server error
  /track/view/{trackName}:
    get:
      tags:
        - tracks
      description: retrieving the track in the raw, plaintext format
      parameters:
        - in: path
          description: track file name, including the extension
          name: trackName
          required: true
          schema:
            type: string
          example: bezier.thr
      responses:
        '200':
          description: the track does exist and is returned in the same format it's stored on the table's SD card
          content:
            text/plain:
              example: |
                0 0
                -0.83298127 0.00997723
                -0.83298127 1
                0.21011752 1
                0.19935711 0.99980198
                0.18854971 0.99768181
        '404':
          description: track with this name doesn't exist
        '500':
          description: internal server error
# reusable components
components:
  schemas:
    Interpolation:
      type: string
      enum: [spiral, linear]
    ## orders
    Order:
      oneOf:
        - $ref: '#/components/schemas/StopOrder'
        - $ref: '#/components/schemas/PlayPlaylistOrder'
        - $ref: '#/components/schemas/MoveToPointOrder'
      discriminator:
        propertyName: orderType
    StopOrder:
      type: object
      required:
        - orderType
      properties:
        orderType:
          type: string
          enum: [stop]
          example: stop
      example:
        orderType: stop
    PlayPlaylistOrder:
      type: object
      required:
        - orderType
        - playlistName
      properties:
        orderType:
          type: string
          enum: [playPlaylist]
          example: playPlaylist
        playlistName:
          description: the name of the playlist, without the extension
          type: string
          example: my_favourites
      example:
        orderType: playPlaylist
        playlistName: my_favourites
    MoveToPointOrder:
      type: object
      required:
        - targetPoint
        - interpolation
      properties:
        targetPoint:
          $ref: '#/components/schemas/Point'
        interpolation:
          $ref: '#/components/schemas/Interpolation'
        simplify:
          type: boolean
          default: false
          description: |
            decides if the "rotations" should be taken into account when moving between
            the current position and the targetPoint.
            
            For example ThetaRho(0.1, 0.13) and ThetaRho(3.24, 0.14) are right next to each
            other if you just consider the position of the steel ball, but they are a whole
            360 degree rotation away from each other.
            
            if simplify=true, any amount of full rotations is descarded and the movement
            goes on a shortest path (spiral or linear, depending the interpolation)
            
            NOTE: XY points don't contain the "full rotation" information, so if the
            target point is given in the XY coordinate system, simplify=true is implied
            and can't be overridden
            
    ## Points
    Point:
      oneOf:
        - $ref: '#/components/schemas/ThetaRho'
        - $ref: '#/components/schemas/XY'
      discriminator:
        propertyName: coordinateSystem
    ThetaRho:
      type: object
      required:
        - coordinateSystem
        - theta
        - rho
      properties:
        # swaggerhub doesn't really understand the differentiators, so let's just add the example
        coordinateSystem:
          type: string
          example: "ThetaRho"
        theta:
          type: number
          format: double
          example: 6.28
        rho:
          type: number
          format: double
          example: 0.5
          minimum: 0.0
          maximum: 1.0
    XY:
      type: object
      required:
        - coordinateSystem
        - x
        - y
      properties:
        coordinateSystem:
          type: string
          example: "XY"
        x:
          type: number
          format: double
          example: 0.3
          minimum: -1.0
          maximum: 1.0
        y:
          type: number
          format: double
          example: 0.3
          minimum: -1.0
          maximum: 1.0

#    EmptyJSendResult:
#      oneOf:
#        - $ref: '#/components/schemas/JSendSuccess'
#        - $ref: '#/components/schemas/JSendError'
#        - $ref: '#/components/schemas/JSendFail'
    JSendError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [error]
          description: should always be set to "error"
        message:
          type: string
          description: A meaningful, end-user-readable (or at the least log-worthy) message, explaining what went wrong.
        data:
          type: object
          description: A generic container for any other information about the error, i.e. the conditions that caused the error, stack traces, etc.
        code:
          type: integer
          description: A numeric code corresponding to the error, if applicable
    JSendFail:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: [fail]
          description: should always be set to "fail"
        data:
          # description: Again, provides the wrapper for the details of why the request failed. If the reasons for failure correspond to POST values, the response object's keys SHOULD correspond to those POST values.
          type: object
          additionalProperties: true
          example:
            title: a title is required
    JSendSuccess:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: [success]
          description: should always be set to "success"
        data:
          type: object